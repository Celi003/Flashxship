/**
 * Fonction pour nettoyer complÃ¨tement le localStorage
 * Utile aprÃ¨s une rÃ©initialisation de la base de donnÃ©es
 */
export const clearAllStorage = () => {
  // Nettoyer le localStorage
  localStorage.clear();
  
  // Nettoyer les cookies de session
  document.cookie.split(";").forEach((c) => {
    document.cookie = c
      .replace(/^ +/, "")
      .replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
  });
  
  // Nettoyer sessionStorage
  sessionStorage.clear();
  
  console.log('âœ… Tous les stockages locaux ont Ã©tÃ© nettoyÃ©s');
};

/**
 * Fonction pour nettoyer uniquement les donnÃ©es de l'application
 */
export const clearAppData = () => {
  // ClÃ©s spÃ©cifiques Ã  l'application
  const appKeys = [
    'cart',
    'user',
    'authToken',
    'sessionid',
    'csrftoken'
  ];
  
  appKeys.forEach(key => {
    localStorage.removeItem(key);
    sessionStorage.removeItem(key);
  });
  
  console.log('âœ… DonnÃ©es de l\'application nettoyÃ©es');
};

/**
 * Fonction pour vÃ©rifier si le localStorage contient des donnÃ©es
 */
export const checkStorageData = () => {
  const localStorageData: Record<string, string | null> = {};
  const sessionStorageData: Record<string, string | null> = {};
  
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key) {
      localStorageData[key] = localStorage.getItem(key);
    }
  }
  
  for (let i = 0; i < sessionStorage.length; i++) {
    const key = sessionStorage.key(i);
    if (key) {
      sessionStorageData[key] = sessionStorage.getItem(key);
    }
  }
  
  console.log('ðŸ“Š DonnÃ©es localStorage:', localStorageData);
  console.log('ðŸ“Š DonnÃ©es sessionStorage:', sessionStorageData);
  
  return { localStorageData, sessionStorageData };
}; 